{
    "name": "prophet",
    "displayName": "Prophet Debugger",
    "version": "1.3.22",
    "keywords": [
        "multi-root ready"
    ],
    "publisher": "SqrTT",
    "description": "Debugger and Uploader for Demandware/Salesforce sandbox",
    "author": {
        "name": "Anatolii Obitskyi",
        "email": "tolik@sqrtt.pro"
    },
    "engines": {
        "vscode": "^1.46.0",
        "node": "^12.8.0"
    },
    "icon": "images/mock-debug-icon.ico",
    "categories": [
        "Debuggers",
        "Programming Languages",
        "Snippets"
    ],
    "private": true,
    "repository": {
        "type": "git",
        "url": "https://github.com/SqrTT/prophet.git"
    },
    "bugs": {
        "url": "https://github.com/SqrTT/prophet/issues"
    },
    "dependencies": {
        "acorn-loose": "^8.0.0",
        "acorn-walk": "^8.0.0",
        "command-exists": "^1.2.9",
        "htmlhint": "^0.14.1",
        "js-beautify": "^1.13.0",
        "rxjs": "^6.6.3",
        "strip-json-comments": "^3.1.1",
        "timeago.js": "^4.0.2",
        "unzip-stream": "^0.3.0",
        "vscode-debugadapter": "^1.42.1",
        "vscode-debugprotocol": "^1.42.0",
        "vscode-languageclient": "^6.1.3",
        "vscode-languageserver": "^6.1.1",
        "vscode-languageserver-textdocument": "^1.0.1",
        "vscode-uri": "^2.1.2",
        "xmldom": "^0.5.0",
        "yazl": "^2.5.1"
    },
    "devDependencies": {
        "@types/acorn": "^4.0.5",
        "@types/estree": "0.0.45",
        "@types/mocha": "^7.0.2",
        "@types/node": "^12.0.0",
        "@types/request": "^2.48.4",
        "@types/yazl": "^2.4.2",
        "@types/vscode": "^1.46.0",
        "mocha": "^8.1.3",
        "ts-loader": "^8.4.0",
        "typescript": "^4.0.3",
        "vscode-debugadapter-testsupport": "^1.42.0",
        "webpack": "^5.75.0",
        "webpack-cli": "^5.0.1"
    },
    "scripts": {
        "vscode:prepublish": "npm install && npm run prepare && npm run test-compile && npm run test",
        "prepare": "webpack --mode production",
        "compile": "webpack --mode development",
        "watch": "webpack --mode development --watch",
        "test": "npm run test-compile && node ./node_modules/mocha/bin/mocha -u tdd ./out/tests/",
        "test-compile": "tsc -p ./src/"
    },
    "main": "./dist/extension",
    "activationEvents": [
        "onCommand:extension.prophet.provideInitialConfigurations",
        "onCommand:extension.prophet.command.create.cartridge",
        "workspaceContains:**/cartridge/*.properties",
        "onFileSystem:ccfs"
    ],
    "contributes": {
        "keybindings": [
            {
                "key": "ctrl+f7",
                "command": "extension.prophet.command.controllers.find"
            }
        ],
        "viewsContainers": {
            "activitybar": [
                {
                    "id": "prophet-explorer",
                    "title": "Prophet",
                    "icon": "resources/cloud.svg"
                }
            ]
        },
        "views": {
            "prophet-explorer": [
                {
                    "id": "dwControllersView",
                    "name": "Controllers"
                },
                {
                    "id": "dwLogsView",
                    "name": "Logs"
                },
                {
                    "id": "cartridgesView",
                    "name": "Cartridges",
                    "when": "config.extension.prophet.cartridges.view.enabled"
                }
            ]
        },
        "menus": {
            "view/title": [
                {
                    "command": "extension.prophet.command.clean.upload",
                    "when": "view == dwControllersView",
                    "group": "navigation"
                },
                {
                    "command": "extension.prophet.command.controllers.find",
                    "when": "view == dwControllersView",
                    "group": "navigation"
                },
                {
                    "command": "extension.prophet.command.controllers.refresh",
                    "when": "view == dwControllersView",
                    "group": "navigation"
                },
                {
                    "command": "extension.prophet.command.clean.upload",
                    "when": "view == cartridgesView",
                    "group": "navigation"
                },
                {
                    "command": "extension.prophet.command.enable.upload",
                    "when": "view == cartridgesView"
                },
                {
                    "command": "extension.prophet.command.disable.upload",
                    "when": "view == cartridgesView"
                },
                {
                    "command": "extension.prophet.command.refresh.cartridges",
                    "when": "view == cartridgesView",
                    "group": "navigation"
                },
                {
                    "command": "extension.prophet.command.create.cartridge",
                    "when": "view == cartridgesView"
                },
                {
                    "command": "extension.prophet.command.filter.logview",
                    "when": "view == dwLogsView",
                    "group": "navigation"
                },
                {
                    "command": "extension.prophet.command.refresh.logview",
                    "when": "view == dwLogsView",
                    "group": "navigation"
                }
            ],
            "view/item/context": [
                {
                    "command": "extension.prophet.command.create.folder",
                    "when": "viewItem == cartridgeDirectory"
                },
                {
                    "command": "extension.prophet.command.create.file",
                    "when": "viewItem == cartridgeDirectory"
                },
                {
                    "command": "extension.prophet.command.clean.log",
                    "when": "viewItem == dwLogFile"
                }
            ],
            "explorer/context": [
                {
                    "command": "extension.prophet.command.override.template",
                    "when": "resourceLangId == isml",
                    "group": "1_modification"
                },
                {
                    "command": "extension.prophet.command.override.script",
                    "when": "resourceLangId == javascript",
                    "group": "1_modification"
                },
                {
                    "command": "extension.prophet.command.download.webservice.api",
                    "when": "resourceExtname == .wsdl",
                    "group": "1_modification"
                }
            ],
            "editor/context": [
                {
                    "command": "extension.prophet.command.override.template",
                    "when": "resourceLangId == isml",
                    "group": "1_modification"
                },
                {
                    "command": "extension.prophet.command.override.script",
                    "when": "resourceLangId == javascript",
                    "group": "1_modification"
                }
            ]
        },
        "commands": [
            {
                "command": "extension.prophet.command.override.template",
                "title": "Override template in another cartridge..."
            },
            {
                "command": "extension.prophet.command.export.properties.to.csv",
                "title": "Prophet: Export properties to csv file"
            },
            {
                "command": "extension.prophet.command.import.csv.to.properties",
                "title": "Prophet: Import csv file to properties"
            },
            {
                "command": "extension.prophet.command.override.script",
                "title": "Override script in another cartridge..."
            },
            {
                "command": "extension.prophet.command.download.webservice.api",
                "title": "Download SOAP Web Service API..."
            },
            {
                "command": "extension.prophet.command.controllers.find",
                "title": "Quick find controller",
                "description": "Quick find controller",
                "icon": {
                    "light": "resources/light/search.svg",
                    "dark": "resources/dark/search.svg"
                }
            },
            {
                "command": "extension.prophet.command.controllers.refresh",
                "title": "Prophet: Refresh",
                "description": "Refresh controllers list",
                "icon": {
                    "light": "resources/light/refresh.svg",
                    "dark": "resources/dark/refresh.svg"
                }
            },
            {
                "command": "extension.prophet.command.enable.upload",
                "title": "Prophet: Enable Upload",
                "description": "Enable upload of cartridges"
            },
            {
                "command": "extension.prophet.command.disable.upload",
                "title": "Prophet: Disable Upload",
                "description": "Disale upload of cartridges"
            },
            {
                "command": "extension.prophet.command.clean.upload",
                "title": "Prophet: Clean Project/Upload all",
                "description": "Clean Project/Upload all",
                "icon": {
                    "light": "resources/light/clean.svg",
                    "dark": "resources/dark/clean.svg"
                }
            },
            {
                "command": "extension.prophet.command.refresh.cartridges",
                "title": "Refresh cartridges list",
                "description": "Refresh cartridges list",
                "icon": {
                    "light": "resources/light/refresh.svg",
                    "dark": "resources/dark/refresh.svg"
                }
            },
            {
                "command": "extension.prophet.command.create.cartridge",
                "title": "Create cartridge",
                "description": "Create cartridge"
            },
            {
                "command": "extension.prophet.command.create.folder",
                "title": "New folder",
                "description": "New folder"
            },
            {
                "command": "extension.prophet.command.create.file",
                "title": "New file",
                "description": "New file"
            },
            {
                "command": "extension.prophet.command.filter.logview",
                "title": "Filter",
                "description": "Filter log view",
                "icon": {
                    "light": "resources/light/search.svg",
                    "dark": "resources/dark/search.svg"
                }
            },
            {
                "command": "extension.prophet.command.refresh.logview",
                "title": "Refresh",
                "description": "Refresh log view",
                "icon": {
                    "light": "resources/light/refresh.svg",
                    "dark": "resources/dark/refresh.svg"
                }
            },
            {
                "command": "extension.prophet.command.clean.log",
                "title": "Clean",
                "description": "Clean log file"
            },
            {
                "command": "extension.prophet.command.open.documentation",
                "title": "Prophet: Open Documentation",
                "description": "Open Documentation"
            },
            {
                "command": "extension.prophet.command.open.xchange",
                "title": "Prophet: Open Dev Center Discussion Groups",
                "description": "Open Dev Center Discussion Groups"
            }
        ],
        "jsonValidation": [
            {
                "fileMatch": "dw.json",
                "url": "./syntaxes/dw.schema.json"
            },
            {
                "fileMatch": "*/cartridge/experience/pages/*.json",
                "url": "https://documentation.b2c.commercecloud.salesforce.com/DOC3/topic/com.demandware.dochelp/DWAPI/content/pagetype.json"
            },
            {
                "fileMatch": "*/cartridge/experience/components/*.json",
                "url": "https://documentation.b2c.commercecloud.salesforce.com/DOC3/topic/com.demandware.dochelp/DWAPI/content/componenttype.json"
            }
        ],
        "snippets": [
            {
                "language": "isml",
                "path": "./snippets/snippets.json"
            },
            {
                "language": "javascript",
                "path": "./snippets/requireSnippets.json"
            },
            {
                "language": "javascript",
                "path": "./snippets/scriptSnippets.json"
            }
        ],
        "languages": [
            {
                "id": "isml",
                "extensions": [
                    ".isml"
                ],
                "aliases": [
                    "ISML"
                ],
                "configuration": "./syntaxes/isml.configuration.json"
            },
            {
                "id": "dwscript",
                "aliases": [
                    "DemandWare Script[Deprecated]",
                    "dwscript"
                ],
                "extensions": [
                    ".ds"
                ],
                "configuration": "./syntaxes/dwscript.configuration.json"
            },
            {
                "id": "dwlog",
                "aliases": [
                    "DW Log File"
                ],
                "extensions": [
                    ".log"
                ]
            },
            {
                "id": "javascript"
            }
        ],
        "grammars": [
            {
                "language": "isml",
                "scopeName": "text.isml.basic",
                "path": "./syntaxes/isml.tmLanguage.json",
                "embeddedLanguages": {
                    "text.html": "html",
                    "source.css": "css",
                    "source.js": "javascript"
                }
            },
            {
                "language": "dwscript",
                "scopeName": "source.dwscript",
                "path": "./syntaxes/dwscript.tmLanguage.json",
                "embeddedLanguages": {
                    "source.js": "javascript"
                }
            },
            {
                "language": "dwlog",
                "scopeName": "text.log",
                "path": "./syntaxes/dwlog.tmLanguage"
            }
        ],
        "breakpoints": [
            {
                "language": "javascript"
            },
            {
                "language": "dwscript"
            }
        ],
        "debuggers": [
            {
                "type": "prophet",
                "label": "Attach to Sandbox",
                "program": "./dist/mockDebug.js",
                "runtime": "node",
                "configurationSnippets": [
                    {
                        "label": "SFCC Debugger",
                        "description": "configuration will look up for dw.json",
                        "body": {
                            "type": "prophet",
                            "request": "launch",
                            "name": "${2:Attach to Sandbox}"
                        }
                    }
                ],
                "configurationAttributes": {
                    "launch": {
                        "required": [],
                        "properties": {
                            "trace": {
                                "type": "boolean",
                                "description": "Enable logging of the Debug Adapter Protocol.",
                                "default": false
                            }
                        }
                    }
                },
                "initialConfigurations": [
                    {
                        "type": "prophet",
                        "request": "launch",
                        "name": "Attach to Sandbox"
                    }
                ]
            }
        ],
        "configuration": {
            "title": "Prophet Configuration",
            "properties": {
                "extension.prophet.htmlhint.enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Enable linting of ISML document",
                    "scope": "window"
                },
                "extension.prophet.upload.enabled": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enable upload to sandbox",
                    "scope": "window"
                },
                "extension.prophet.clean.on.start": {
                    "type": "boolean",
                    "default": true,
                    "description": "Clean/upload all on editor startup to sandbox",
                    "scope": "window"
                },
                "extension.prophet.ismlServer.activateOn": {
                    "type": "array",
                    "default": [
                        "isml"
                    ],
                    "description": "list of file extension for server activation",
                    "scope": "window"
                },
                "extension.prophet.cartridges.path": {
                    "type": "string",
                    "default": "",
                    "description": "List of cartridges separated by colon. (app_storefront_controllers:app_storefront_core:bc_library)",
                    "scope": "window"
                },
                "extension.prophet.cartridges.view.enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Enable/Disable cartridges view",
                    "scope": "window"
                },
                "extension.prophet.ignore.list": {
                    "type": "array",
                    "default": [
                        "node_modules",
                        "\\.git",
                        "\\.zip$"
                    ],
                    "description": "list of regexp for files/folders should be excludes from zipping during clean (not from watching)",
                    "scope": "resource"
                },
                "extension.prophet.sandbox.filesystem.enabled": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enable Sandbox File System workspace",
                    "scope": "window"
                },
                "extension.prophet.script.server.disable.diagnostics": {
                    "type": "boolean",
                    "default": false,
                    "description": "Disable diagnostics/script linting (not recommended)",
                    "scope": "window"
                }
            }
        }
    }
}
